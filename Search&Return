from bs4 import BeautifulSoup
import requests
import time
import numpy as np
import pandas as pd

from selenium import webdriver
# This allows you to use special keys like return
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By

# Defines what 'drives' the browser you are going to use to do the work. Needs the path
# Macbook didn't trust it, had to download and move file to local/bin manually then open to get to work
# This opens a chrome window to use
driver = webdriver.Chrome('/usr/local/bin/chromedriver')

list_of_perms =[]

link = "https://planning.cornwall.gov.uk/online-applications/search.do?action=advanced"
# This provides the basic root url to later add directions to a specific page
# It takes the current url, splits into into before the text and after, and returns the first value to start the link
linkroot = link.partition('online-applications')[0]
linkroot = linkroot[:-1] #removes trailing /
print(linkroot)

def nav_to_page(link):
    
    page = link
    # Specifies which webpage you want the driver to get
    driver.get(page)
    print(driver.title)

def set_html(link):
    
    # Sets html variable as the returned results page
    html = driver.page_source
    return html

def set_soup(link):
        
    # Create an instance of the BS, define the html to use and how to open it (lxml module)
    soup = BeautifulSoup(html, 'lxml')
    return soup



nav_to_page(link)
html = set_html(link)
soup = set_soup(link)

# search_bar = driver.find_element(By.NAME,"q")
CaseDecSearch = driver.find_element(By.NAME,"searchCriteria.caseDecision")
FromSearch = driver.find_element(By.NAME,"date(applicationDecisionStart)")
ToSearch = driver.find_element(By.NAME,"date(applicationDecisionEnd)")
DevTypeSearch =driver.find_element(By.NAME,"searchCriteria.developmentType")
SearchButton = driver.find_element(By.XPATH,'//*[@id="advancedSearchForm"]/div[4]/input[2]')

CaseDecSearch.send_keys("Refused")
FromSearch.send_keys('30/01/2022')
ToSearch.send_keys('30/01/2023')
DevTypeSearch.send_keys('Changes of Use')
SearchButton.click()

def find_next_page():
    
    # Finds the link for the next page of search results if there is one, otherwise returns None. 
    
    # Sets html variable as the returned results page
    html = driver.page_source
    
    # Create an instance of the BS, define the html to use and how to open it (lxml module)
    soup = BeautifulSoup(html, 'lxml')
    
    while True:
        try:
            # Find the link for the next page to be used after parsing this one
            Next = soup.find('a',class_='next')['href']
            Next = linkroot + Next
            print('next link is: ' + Next)
            # break out of the while loop if it finds the next page link
            return Next
        except TypeError:
            print("No next page to find. Ending search")
            # This should break out of the function completely as it's looped through all pages
            return None

def search_page():
    
    # Sets html variable as the returned results page
    html = driver.page_source

    # Create an instance of the BS, define the html to use and how to open it (lxml module)
    soup = BeautifulSoup(html, 'lxml')
    
    # Return a list of 'cards' found by inspecting an element on the webpage. These contain the summary info variables
    cards = soup.find_all('li',class_='searchresult')

    for card in cards:

        description = card.a.text.replace('  ','').replace('\n','')
        address = card.p.text.replace('  ','').replace('\n','')
        # this takes an element including many things and splits it out so you can find individual attributes
        meta = card.find('p',class_='metaInfo').text.split()
        Ref = meta[2].replace('\n','')
        # this the list from the above split, isolates the decision date fields and concatenates them to a str date
        DecDate = "/".join(meta[6:9])
        # this turns a hyperlink path and label into text, splits it out to isolate the link, then trims off excess code)
        linky = str(card.a).split()[1][6:-2]
        # to. complete the link, the root is added and a spurious section is replaced
        linky2 = (linkroot + linky).replace('amp;','')
        
        
        details_list = [Ref,address,description,DecDate,linky2]
        list_of_perms.append(details_list)
        
        print(Ref)
        print(address)
        print(description)
        print(DecDate)
        print(linky2)
        print('')

def run_search():
    # After an initial results page, this keeps running the main code and opening pages until there
    # are no more search pages to open
    while True:
        try:
            # find the next link on the page if there is one, otherwise return None
            nextpage = find_next_page()
            # Open the next page
            if nextpage != None:
                driver.get(nextpage)
                print('Searching Page: ' + nextpage)
                search_page()
                continue
            else:
                break
        except:
            print('Search concluded')
            break

# This is the initial search on the first page of results
search_page()

run_search()

print('done')
# Create the pandas DataFrame
df = pd.DataFrame(list_of_perms, columns = ['Ref', 'Address', 'Description','DecDate','Link'])

'''TO DO


HERE IS THE PART WHERE YOU WOULD CYCLE THROUGH LINKS YOU WANT TO LOOK IN DOCUMENTS FOR




'''

link = 'https://planning.cornwall.gov.uk/online-applications/applicationDetails.do?keyVal=RKCKRVFGHZT00&activeTab=summary'

nav_to_page(link)
html = set_html(link)
soup = set_soup(link)

def Documents_Tab():
    
    # Creates a dictionary of doc names and their link buttons by iterating through rows
    docs_dict = {}

    #Identify the button to click to open the documents page
    DocumentsTab = driver.find_element(By.ID,"tab_documents")

    DocumentsTab.click()

    # Identifies the table of documents by it's element ID
    docs_tbl = driver.find_element(By.ID,"Documents")

    # Read the content of the table as text
    tbl_content = docs_tbl.text

    # split the content by new lines, returning a list of each rows details (containing all details in long string)
    smth = tbl_content.split('\n')

    no_rows = len(smth)

    # gather all the doc names using the number of records you know there are for the range of rows
    # ignore the first row as it's a header. Table row references start at 1
    for i in range(2,no_rows+1):
        print(str(i))
        # Gets the title of the doc
        #td[7] == the column of the table that contains the image to click to open the document
        #tr[2] == the table row references (includes header @ 1)
        title = driver.find_element(By.XPATH,'//*[@id="Documents"]/tbody/tr[' + str(i)+ ']/td[6]').text
        # Gets the link for the doc from the icon on the last row
        doc_link = driver.find_element(By.XPATH,'//*[@id="Documents"]/tbody/tr[' + str(i)+ ']/td[7]/a')
        docs_dict[title] = doc_link
    return docs_dict

docs_dict = Documents_Tab()

doctitle = 'APPLICATION FORM'

def search_for_doc_and_open(doctitle):
    for k,v in docs_dict.items():
        if k == doctitle:
            v.click()

search_for_doc_and_open(doctitle)
































                

driver.close()

#.text takes the actual html code as opposed the return code for connection to the site
# html_text = requests.get(SearchPage).text
#SearchButton.send_keys(Keys.RETURN)
#CaseDecSearch.clear()

# This provides the basic root url to later add directions to a specific page
# It takes the current url, splits into into before the text and after, and returns the first value to start the link
# linkroot = str(driver.current_url).partition('online-applications')[0]





'''def Documents_Tab OLD():
    
    
    
    # Create a list of documents for each permission
    list_of_docs = []

    #Identify the button to click to open the documents page
    DocumentsTab = driver.find_element(By.ID,"tab_documents")

    DocumentsTab.click()

    # Identifies the table of documents by it's element ID
    docs_tbl = driver.find_element(By.ID,"Documents")

    # Read the content of the table as text
    tbl_content = docs_tbl.text

    # split the content by new lines, returning a list of each rows details (containing all details in long string)
    smth = tbl_content.split('\n')

    # Get rid of the header row of the table
    smth = smth[1:]

    # Create a count of upper case letters in a record
    count_upper = 0

    # for each record in the table (all the cell values together), iterate over the record until you reach two 
    # letters capitalised together (document titles are capitalised).
    # Return the index number of where the document title starts within the string

    for record in smth:

        while count_upper < 2:

            for i in range(len(record)):
                character = record[i]

                if character.isupper() and character.isnumeric()==False:
                    count_upper +=1
                else:
                    count_upper = 0

                if count_upper == 2:
                    doc = record[i-1:]
                    print('this is the document name: ' + doc)
                    list_of_docs.append(doc)
                    # this is where code to test document names would go
    return list_of_docs'''

"""# Create a list of documents for each permission
list_of_docs = []

#Identify the button to click to open the documents page
DocumentsTab = driver.find_element(By.ID,"tab_documents")

DocumentsTab.click()

# Identifies the table of documents by it's element ID
docs_tbl = driver.find_element(By.ID,"Documents")

# Read the content of the table as text
tbl_content = docs_tbl.text

# split the content by new lines, returning a list of each rows details (containing all details in long string)
smth = tbl_content.split('\n')

no_rows = len(smth)

# Creates a dictionary of doc names and their link buttons by iterating through rows
docs_dict = {}
# gather all the doc names using the number of records you know there are for the range of rows
# ignore the first row as it's a header. Table row references start at 1
for i in range(2,no_rows+1):
    print(str(i))
    # Gets the title of the doc
    #td[7] == the column of the table that contains the image to click to open the document
    #tr[2] == the table row references (includes header @ 1)
    title = driver.find_element(By.XPATH,'//*[@id="Documents"]/tbody/tr[' + str(i)+ ']/td[6]').text
    # Gets the link for the doc from the icon on the last row
    doc_link = driver.find_element(By.XPATH,'//*[@id="Documents"]/tbody/tr[' + str(i)+ ']/td[7]/a')
    docs_dict[title] = doc_link"""
